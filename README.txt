>Quickstart Guide
	If you're reading this, I'll assume you have already downloaded, unzipped, and read the README file for my ghostpet application, and you've come here to figure out how to make improvements to it. Before you do anything, though, you need to make sure you have the JDK - Java Development Kit. This can be downloaded for free from Oracle. Assuming you have this, I'll step through the procedure for making a new behavior in order.
	
	First, click the "Select a folder..." button. This will open up a file-chooser dialogue. Select the parent folder for your ghost, and click OK. The little label next to the button that said "(No folder selected)" should change to the path of the folder you chose. This is important, as it tells the application where to generate the behavior into.
	
	Next, name your behavior by typing the name into the text box under the label "Behavior Name." Doesn't matter what you choose to name it, but you MUST name it in the format [name]Behavior - PetBehavior, HoverAskBehavior, whatever, so long as it contains the word Behavior at the end. Pick something descriptive so you can find the behavior again later. (Yes, I wrote that shorter in the application itself, but I wanted to make sure.)
	
	Then select the behavior type, using the drop-down box under the label "Behavior Type." Remember the behavior types mentioned in the ghostpet's README.txt? You can select any one of them here (except Timed, that'll be explained later). A warning: changing this later on WILL result in any lines (I'll explain later) you added being wiped out, forcing you to start over from the point where you actually start defining your behavior. Also, Multiline has been named LongTalk here, and there is a reason for it I promise.
	
	If you selected Normal or Ask, click the "Select an Image" button. A file-chooser dialogue will open, starting in the folder you selected in the first step. Go into the resources folder, and then the images folder, and choose a .jpg/.png image file to use. This will be the image the ghost uses when it executes this behavior. Then, go down to the text box labeled "Act Time" and enter what the behavior's ActTime should be. Numbers only, and ActTime is as defined in the ghost's README. (If you didn't select Normal or Ask, these inputs will be disabled.)
	
	Next, there are two checkboxes - one labeled "Remembers information?" and the other labeled "Activated on a timer?" The first one is irrelevant if you don't know how to program Java; leave it unchecked to speed up shutdown times. I'll explain what it does at the end of this file for curious programmers. The second one creates a Timer behavior named "Timer_[name you put in for Behavior Name]" and reveals two more text boxes, labeled "Min. Since Last" and "Max. Since Last." These two correspond to the minSinceLast and maxSinceLast values in a timed .json file, as described in the ghost README; input those as you see fit, and once you finish defining the actual behavior and the program generates it, it will also generate a timer behavior with those values and the generated behavior as behaviorExecuted. 
	
	If you selected Ask as the behavior type, there's a text field labeled "Give Up Behavior." Text entered there will be put into the value giveUp in the generated behavior, as defined in the ghost README. 
	
	At the bottom, there are four buttons: "New Statement," "New Ask Option," "New Statement Group," and "New Random." Different combinations will be enabled or disabled depending on which behavior type you selected. Normal will have "New Statement," Ask will have "New Statement" and "New Ask Option," LongTalk will have "New Statement Group," and Randomized will have "New Random." Each button creates a set of input fields in the scrollable panel to the right. I'll go over exactly what each button does, and what the input fields it creates mean, in order.
	* New Statement creates an input field with just a text field labeled "Text." Text entered here becomes a string inserted into the "statements" array of a behavior. 
	* New Ask Option creates an input field with a text field labeled "Text" and a text field labeled "Behavior." Together, these generate an entry in the "opts" array of an Ask behavior, with "Text" going into the "line" field and "Behavior" going into the "behave" field.
	* New Statement Group creates a larger, scrollable field with a button labeled "Add Values" at the bottom; this field will generate an entry in the "chains" array. Clicking the Add Values button will generate an entry field with a text field labeled "Text," a smaller text field labeled "Speak Time," and a button labeled "Select an image" with a label reading "(none)" next to it. Together, these add an entry to the parts of a chain. The field labeled "Text" becomes an entry in "stmts," the field labeled "Speak Time" becomes an entry in "times," and the button labeled "Select an image" opens a file select dialogue (exactly like the "Select an image" button above) which chooses an image as an entry in "imgStrs." Effectively, the New Statement Group button creates a possible statement set, and Add Values creates a new statement, which the ghost iterates through as a multiline behavior.
	* New Random creates an input field with a text field labeled "Behavior." The value entered into this field is entered into the behaves array, as described in the ghost README.
	
	Once you've input all the values you want, you can click Done. The program will automatically generate the class and .JSON file, compile it, and insert the compiled class into the .jar file that the ghost runs. Then you can just run the ghost as usual, and watch your new behavior happen - although unless it's on a timer, it won't actually happen unless you put its name into some other behavior to be called (say, in an ask behavior).
	
	The Remove Newest button allows you to remove the last line added. (Mostly useful if you've added a line of the wrong type before choosing the ghost's type, as you can just delete the line in the .JSON file otherwise.) 
	
	The other buttons at the base - Quit and Clear - should be fairly self-explanatory.

>A Guide to IRememberBehavior
	I mentioned above that I would describe what happened if you checked "Remembers information?" for programmers. Warning, technical jargon begins here.
	
	Basically, it makes the class implement an interface called IRememberBehavior. When the ghost shuts down, a shutdown hook causes it to go through each behavior implementing this interface and call a default method in said interface that causes it to save any changes to the data it loaded from the .json file, back to the .json file. If actTime gets edited, or statement lines get deleted, then use this to make sure that it remembers it for next time. However, the behaviors don't normally do that. You'd have to code in any feature that uses it yourself, probably overriding other methods, and possibly adding new values to the .json file and the class. As an example, you could implement IRememberBehavior in a multiline behavior, create a new variable that counts how many times the behavior has been called (overriding setNum to increment this value so it gets upped once each time the ghost calls Say() on the behavior), and override calculate() to force a specific statement sequence to be used at a certain value of your variable.
	
>To Do Yet
	Yes, this is still in beta. There's a number of features I still want to implement, but right now I just want to get this out there so it can be used with the ghostpet and I don't have to keep promising people that the ghostpet will be out eventually. Here's some of the features I plan to add: 
	* An undo button to remove the last line added
	* More descriptive error messages
	* A way to edit or delete behaviors that already exist without having to go through the .json files
	If you have more ideas or find bugs, feel free to contact me at jacobmarcus42@gmail.com.